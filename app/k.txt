@login_required
def comment_item(request, item_id):
    item = get_object_or_404(Item, pk=item_id)
    user = request.user

    if request.method == 'POST':
        comment_text = request.POST.get('text')
        comment = Comment(user=user, item=item, text=comment_text)
        comment.save()

        response_data = {'success': True}
        return JsonResponse(response_data)

    # GETリクエストの場合は既存のコメントを返す
    comments = Comment.objects.filter(item=item).order_by('-created_at')
    comment_list = []
    for comment in comments:
        comment_list.append({
            'user_name': comment.user.username,
            'comment_text': comment.text,
            'created_at': comment.created_at.strftime('%Y-%m-%d %H:%M:%S')
        })
    response_data = {'comments': comment_list}
    return JsonResponse(response_data)

<form id="comment-form">
  <input type="text" id="comment-input" placeholder="コメントを入力してください">
  <button type="submit">コメントする</button>
</form>

<div id="comment-list">
  <!-- コメントが追加される部分 -->
</div>

<script>
  // Ajax関連のJavaScriptコードをここに記述する
</script>



/*
  // コメントの取得
function getComments() {
  $.ajax({
    type: 'GET',
    url: '/get_comments/',  // コメントを取得するエンドポイントのURLを適宜変更する
    success: function(response) {
      // 取得したコメントを表示する処理をここに記述する
    },
    error: function(xhr, status, error) {
      console.log(error);
    }
  });
}

// コメントの送信
function sendComment(commentText) {
  $.ajax({
    type: 'POST',
    url: '/send_comment/',  // コメントを送信するエンドポイントのURLを適宜変更する
    data: {
      text: commentText,
      csrfmiddlewaretoken: '{{ csrf_token }}'  // CSRFトークンを適切な方法で取得する
    },
    success: function(response) {
      // コメント送信後の処理をここに記述する
    },
    error: function(xhr, status, error) {
      console.log(error);
    }
  });
}

// ページ読み込み時に既存のコメントを取得して表示
$(document).ready(function() {
  getComments();
});

// コメントフォームの送信ボタンがクリックされた時の処理
$('#comment-form').submit(function(e) {
  e.preventDefault();
  var commentText = $('#comment-input').val();
  sendComment(commentText);
});
*/